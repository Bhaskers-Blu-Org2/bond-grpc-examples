// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System;
using System.Threading.Tasks;
using Grpc.Core;

// suppress "This async methods lacks 'await' operators"
// The abstract class methods Bond generates for you are async.
// In this example, we only have synchronous code.
#pragma warning disable CS1998

// This is the same namespace declared in calculator.bond.
namespace Bond.Grpc.Examples.Calculator
{
    // CalculatorServiceBase is generated by Bond from this definition:
    //
    // service Calculator
    // {
    //     Result Add(BinaryOpArgs);
    //     Result Divide(BinaryOpArgs);
    // }
    // 
    // The base class has an abstract method for each method in the service definition. You can extend it and implement
    // those methods to create a complete service.
    class CalculatorService : Calculator.CalculatorBase
    {
        // Add two numbers.
        public override async Task<IMessage<Result>> Add(IMessage<BinaryOpArgs> param, ServerCallContext sct)
        {
            // The arguments are passed as a parameterized IMessage, which is a BinaryOpsArgs in serialized form. This
            // allows you to avoid performing deserialization if you can know whether you want to handle a request
            // without looking at it.
            var args = param.Payload.Deserialize();

            var sum = args.left + args.right;
            var result = new Result
            {
                value = sum
            };

            return Message.From(result);
        }

        // Divide two numbers. Unlike Add, this call can throw an error (if the divisor is zero).
        public override async Task<IMessage<Result>> Divide(IMessage<BinaryOpArgs> param, ServerCallContext sct)
        {
            var args = param.Payload.Deserialize();

            if (args.right == 0)
            {
                throw new RpcException(new Status(StatusCode.InvalidArgument, "Cannot divide by zero"));
            }

            var quotient = args.left / args.right;
            var result = new Result
            {
                value = quotient
            };

            return Message.From(result);
        }

        public static void Main()
        {
            Server calculatorService = new Server
            {
                Services =
                {
                    Calculator.BindService(new CalculatorService())
                },
                Ports = { new ServerPort("localhost", 50051, ServerCredentials.Insecure) }
            };
            calculatorService.Start();

            // Block and let the service run.
            Console.WriteLine($"{nameof(CalculatorService)} up and running. Press enter to exit.");
            Console.ReadLine();

            Task.WaitAll(calculatorService.ShutdownAsync());
        }
    }
}
